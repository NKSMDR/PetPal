# Generated by Django 5.2 on 2025-09-06 09:45

from django.db import migrations
from django.utils.text import slugify
import uuid


def update_existing_pet_slugs(apps, schema_editor):
    """Update slugs for existing pets to use breed-based slugs"""
    Pet = apps.get_model('petpalapp', 'Pet')
    
    for pet in Pet.objects.all():
        # Generate new slug using breed name and UUID for uniqueness
        new_slug = slugify(f"{pet.breed.name}-{uuid.uuid4().hex[:8]}")
        
        # Ensure slug is unique
        while Pet.objects.filter(slug=new_slug).exists():
            new_slug = slugify(f"{pet.breed.name}-{uuid.uuid4().hex[:8]}")
        
        pet.slug = new_slug
        pet.save()


def reverse_update_pet_slugs(apps, schema_editor):
    """Reverse migration - restore name-based slugs if needed"""
    Pet = apps.get_model('petpalapp', 'Pet')
    
    for pet in Pet.objects.all():
        if hasattr(pet, 'name') and pet.name:
            # Only if name field still exists
            new_slug = slugify(f"{pet.name}-{pet.breed.name}")
            
            # Ensure slug is unique
            counter = 1
            original_slug = new_slug
            while Pet.objects.filter(slug=new_slug).exclude(pk=pet.pk).exists():
                new_slug = f"{original_slug}-{counter}"
                counter += 1
            
            pet.slug = new_slug
            pet.save()


class Migration(migrations.Migration):

    dependencies = [
        ('petpalapp', '0006_remove_map_fields'),
    ]

    operations = [
        migrations.RunPython(
            update_existing_pet_slugs,
            reverse_update_pet_slugs,
        ),
        migrations.RemoveField(
            model_name='pet',
            name='name',
        ),
    ]
